Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words.

Note:

The same word in the dictionary may be reused multiple times in the segmentation.
You may assume the dictionary does not contain duplicate words.
Example 1:

Input: s = "leetcode", wordDict = ["leet", "code"]
Output: true
Explanation: Return true because "leetcode" can be segmented as "leet code".
Example 2:

Input: s = "applepenapple", wordDict = ["apple", "pen"]
Output: true
Explanation: Return true because "applepenapple" can be segmented as "apple pen apple".
             Note that you are allowed to reuse a dictionary word.
Example 3:

Input: s = "catsandog", wordDict = ["cats", "dog", "sand", "and", "cat"]
Output: false

var wordBreak = function(s, wordDict) {
    let set = new Set(wordDict);
    let length = 0;
    let left = 0;
    let inc = 0;
    
    while((left + inc) <= s.length){
        let word = s.substr(left, inc);
        if(set.has(word)){
            
            console.log(left, inc);
            
            length = length + inc;
            console.log(length);
            left += inc;
            inc = 0;
        }else{
            inc ++;
        }
    }
    
    return length === s.length;
};

    let set = new Set(wordDict);
    
    let dp = new Array(s.length + 1).fill(false);
    dp[0] = true;
    
    for(let i = 1; i <= s.length; i++){
        for(let j = 0; j < i; j++){
            if(dp[j] && set.has(s.substring(j,i))){
                dp[i] = true;
                break;
            }
        }
    }
    
    return dp[s.length];