36.
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
function isValidSudoku(board){
    let set = new Set();

    for(let row = 0; row < board.length; row++){
        for(let col = 0; col < board[0].length; col++){
            let cur = board[row][col];
            let rowCheck = cur + 'row' + row;
            let colCheck = cur + 'col' + col;
            let unit = Math.floor(row/3)+ '-' + Math.floor(col/3);
            let unitCheck = cur + 'unit' + unit;

            if(set.has(rowCheck) || set.has(colCheck) || set.has(unitCheck)) return false;

            set.add(rowCheck);
            set.add(colCheck);
            set.add(unitCheck); 
        }
    }

    return true;
};

150.
["2", "1", "+", "3", "*"]
1. iterate thru the array
2. push each number inside a stack
3. once we hit a operator, pop twice from the stack
4. calculate and push the result back to the stack
5. return value inside the stack

["4","13","5","/","+"]
7
6
["10","6","9","3","+","-11","*","/","*","17","+","5","+"]
12
22

  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22



function evalRPN(tokens){
    let stack = [];
    for(let i = 0; i < tokens.length; i++){
        if(tokens[i] === "+"){
            stack.push(stack.pop() + stack.pop());
        }else if(tokens[i] === "-"){
            stack.push(-stack.pop() + stack.pop());
        }else if(tokens[i] === "*"){
            stack.push(stack.pop() * stack.pop());
        }else if(tokens[i] === "/"){
            stack.push(Math.trunc(1/stack.pop() * stack.pop()));
        }else{
            stack.push(Number(tokens[i]));
        }
    }

    return stack[0];
}

341.
Input: [[1,1,[3,4],2],2,[1,1]]



[[1,1,[3,4],2],2,[1,1]]  3






Output: [1,1,2,1,1]
/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * function NestedInteger() {
 *
 *     Return true if this NestedInteger holds a single integer, rather than a nested list.
 *     @return {boolean}
 *     this.isInteger = function() {
 *         ...
 *     };
 *
 *     Return the single integer that this NestedInteger holds, if it holds a single integer
 *     Return null if this NestedInteger holds a nested list
 *     @return {integer}
 *     this.getInteger = function() {
 *         ...
 *     };
 *
 *     Return the nested list that this NestedInteger holds, if it holds a nested list
 *     Return null if this NestedInteger holds a single integer
 *     @return {NestedInteger[]}
 *     this.getList = function() {
 *         ...
 *     };
 * };
 */
/**
 * @constructor
 * @param {NestedInteger[]} nestedList
 */
var NestedIterator = function(nestedList) {
    this.stack = [];
    this.stack.push({arr: nestedList, next: 0});
   
};


/**
 * @this NestedIterator
 * @returns {boolean}
 */
NestedIterator.prototype.hasNext = function() {

    while(stack.length){
    let obj = this.stack[this.stack.length - 1];
    while(obj.arr[obj.next] === undefined){
        this.stack.pop();
        if(this.stack.length === 0) return false;
        obj = this.stack[this.stack.length - 1];
        obj.next++;
    }

    if obj.arr[obj.next].isInteger() {
        obj.next++;
        return true;
    }

    this.stack.push({arr: obj.arr[obj.next], next: 0})
    
    }
    return false;
}
[1]    1 
[[[],[]], [1]]  1

/**
 * @this NestedIterator
 * @returns {integer}
 */
NestedIterator.prototype.next = function() {
    let obj = this.stack[this.stack.length -1];
    return obj.arr[obj.next - 1];
};

/**
 * Your NestedIterator will be called like this:
 * var i = new NestedIterator(nestedList), a = [];
 * while (i.hasNext()) a.push(i.next());
*/

  [ {arr:s[1,1,[3,4],2],2,[1,1]], next:2}]


  next()

  next()
1 


class NestedIterator {
    stack<NestedInteger>Stack;

    public:
        NestedIterator(vector<NestedInteger> &x) {
            for(int i = nestedlist.size()-1; i >=0; i--)
        NestedIterator(vector<NestedInteger> &x) {
            Stack.push([i]);
        }

        int next(){
            int num = Stack.top().getInteger();
            Stack.pop();
            return num;
        }

        bool hasNet(){
            while(!Stack.empty() && !Stack.top().isInteger())
            {
                vector<NestedInteger> data = Stack.top().getList();
                Stack.pop();

                for(int i = data,suze() -1; i >= 0; i--)
                    Stack.push(data[i]);
            }
            return !Stack.empty();
        }
        }
}


1.....100 


stack

arr  idx