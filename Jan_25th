['a', 'b', 'c']

ab 
ac 
bc


array = ['a', 'b', 'c', 'd', 'e', 'f']
r = 3

const func = function(array){
    for(let i = 0; i < array.length - 1; i++){
        for(let j = i + 1; j < array.length; j++){
            console.log(array[i]+array[j]);
        };
    };
};

                        [a]                             []                       0  a
                    /          \                    /       \
                [ab]            [a]                [b]       []                  1  b
                / \            /   \              /   \     /  \
            [abc] [ab]       [ac]  [a]          [bc]  [b]  [c]  []               2  c 



subset(arr, length, idx, subsetArr){
    if(idx >= arr.length || str.length >= length){
        if(str.length === length){
            console.log(str);
        }
        return;
    }

    //choose
    subset(arr, idx + 1, subsetArr.push(arr[idx]));

    subsetArr.pop();
    //not
    subset(arr, idx + 1, subsetArr);
}

cards
1 - 13

sum > 20            you lose
17 <= sum <= 20     you win
sum < 17            draw another card


given a sum, you need to calculate the winning probability;

const func = function(sum){
    if(sum > 20) return 0;
    if(sum >= 17) return 1;

    let prob = 0;
    for(let i = 1; i < 14; i++){
        prob += func(sum + i) * (1.0/13);
    }

    return prob;
}

// Given an encoded string, return its decoded string.

// The encoding rule is: k[encoded_string], where the encoded_string inside 
// the square brackets is being repeated exactly k times. 
// Note that k is guaranteed to be a positive integer.

// You may assume that the input string is always valid; No extra white spaces, 
// square brackets are well-formed, etc.

// Furthermore, you may assume that the original data does not contain any digits 
// and that digits are only for those repeat numbers, k. For example, there won't be input like 3a or 2[4].

// Examples:

// s = "3[a]2[bc]", return "aaabcbc".
// s = "3[a2[c]]", return "accaccacc".
// s = "2[abc]3[cd]ef", return "abcabccdcdcdef".

decoded(str){
    iterrate through the str
    ans = "aa";
    if it's decodedString ans+= it;

    if(encounter encoded string){
        5
        ans+= num.repeat(decoded("c")); 
    }

    return ans;
}


ans: abeett
num 2
decoded("e")



const decoded = (s) => {
    // setup var
    let count = [];
    let chars = [];
    let ans = '';
    let i = 0;
    // iterrate tho the input str
    while (i < s.length) {
        if (!isNaN(s[i])) {
            let sum = Number(s[i]);
            i++;
            while (!isNaN(s[i])) {
                let tempNum = Number(s[i]);
                sum = sum + tempNum;
                i++;
            };
            count.push(sum);
            continue;
        } else if (s[i] === '[') {
            chars.push(ans);
            ans = '';
        } else if (s[i] === ']') {
            ans = chars.pop() + ans.repeat(count.pop());
        } else {
            ans += s[i]
        };
        i++;
    };
    return ans;
}