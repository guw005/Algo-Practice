    Validate if a given string can be interpreted as a decimal number.

Some examples:
"0" => true
" 0.1 " => true
"abc" => false
"1 a" => false
"2e10" => true
" -90e3   " => true
" 1e" => false
"e3" => false
" 6e-1" => true
" 99e2.5 " => false
"53.5e93" => true
" --6 " => false
"-+3" => false
"95a54e53" => false

Note: It is intended for the problem statement to be ambiguous. It would be best if you gathered all requirements up front before implementing one. However, here is a list of characters that can be in a valid decimal number:

Numbers 0-9
Exponent - "e"
Positive/negative sign - "+"/"-"
Decimal point - "."
Of course, the context of these characters also matters in the input.

 

Example 1:

Input: s = "0"
Output: true
Example 2:

Input: s = "3"
Output: true

var isNumber = function(s) {
    s = s.trim();
    
    let pointSeen = false;
    let eSeen = false;
    let numberSeen = false;
    let numberAfterE = true;
    
    for(let i = 0; i < s.length; i++){
        if(s[i] === '.'){
            if(eSeen || pointSeen){
               return false;
            }
            pointSeen = true;
        } else if(s[i] === 'e'){
            if(eSeen || !numberSeen){
                return false;
            }
            eSeen = true;
            numberAfterE = false;
        } else if('0' <= s[i] && s[i] <= '9'){
            numberSeen = true;
            numberAfterE = true;
        } else if(s[i] === '-' || s[i] === '+'){
            if( i != 0 && s[i - 1] != 'e'){
                return false;
            }
        }else{
            return false;
        }
    }
    
    return numberSeen && numberAfterE;
};