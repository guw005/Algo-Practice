Given a linked list, swap every two adjacent nodes and return its head.

You may not modify the values in the list's nodes. Only nodes itself may be changed.

Input: head = [1,2,3,4]
Output: [2,1,4,3]

var swapPairs = function(head) {
    if(head === null || head.next === null) return head;
    
    let swap2 = head.next;
    let swap3 = head.next.next;
    swap2.next = head;
    head.next = swapPairs(swap3);
    return swap2;
};

Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.

Return the quotient after dividing dividend by divisor.

The integer division should truncate toward zero, which means losing its fractional part. For example, truncate(8.345) = 8 and truncate(-2.7335) = -2.

Note:

Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For this problem, assume that your function returns 231 − 1 when the division result overflows.

Input: dividend = 10, divisor = 3
Output: 3
Explanation: 10/3 = truncate(3.33333..) = 3.

var divide = function(dividend, divisor) {
    let count = 0;
    
    while(Math.abs(dividend) >= Math.abs(divisor)){
        if((dividend > 0 && divisor > 0) || (dividend < 0 && divisor < 0)){
            count += 1;
        }else{
            count -= 1;
        }
        
        dividend = Math.abs(dividend) - Math.abs(divisor);
    }
    
    return count;
};

You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.

var addTwoNumbers = function(l1, l2) {
    if(!l1 && !l2) return null;
    
    let dummy = new ListNode();
    let sumNode = new ListNode();
    let val1;
    let val2;
    
    if(!l1){
        val1 = 0;
        l1 = dummy;
    } else{
        val1 = l1.val;
    }
    
    if(!l2){
        val2 = 0;
        l2 = dummy;
    } else{
        val2 = l2.val;
    }
    let sum = val1 + val2;
    
    if(sum >= 10){
        sum %= 10;
        if((l1.next && l2.next) || (l1.next && !l2.next)){
            l1.next.val += 1;
        } else if (!l1.next && l2.next){
            l2.next.val += 1;
        } else if (!l1.next && !l2.next){
            l1.next = new ListNode(1, null);
        }
    }
    
    sumNode.val = sum;
    sumNode.next = addTwoNumbers(l1.next, l2.next);

    return sumNode;
};