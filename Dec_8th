function getUmbrellas(requirement, sizes) {
    // Write your code here
    if(sizes.length === 0) return -1;
    
    let res = Infinity;
    
    for(let i = 0; i < sizes.length; i++){
        if((requirement % sizes[i] === 0) && requirement / sizes[i] < res){
            res = requirement / sizes[i];
        }
    }
    
    if(res === Infinity){
        return -1;
    }else{
        return res;
    }

}

function reductionCost(num) {
    // Write your code here
    if(num.length === 0) return 0;
    if(num.length === 1) return 0;
    
    num.sort((a, b)=> a - b);
    // console.log(num);
    let sum = num[0] + num[1];
    num.shift();
    num.shift();
    // console.log(num);
    num.push(sum);
    // console.log(num);
    
    return sum + reductionCost(num)
}

function closedPaths(number) {
    // Write your code here
    let map = {0 : 1, 4 : 1, 6 : 1, 9 : 1, 8 : 2}
    let res = 0;
    // console.log(map);
    
    let str = number.toString();
    for(let i = 0; i < str.length; i++){
        if(map[str[i]]){
            res += map[str[i]];
        }else{
            res += 0;
        }
    }
    
    return res;
}

function coprimeCount(A) {
    let res = [];
    
    for(let i = 0; i < A.length; i++){
        res.push(numPrime(A[i]));
    }
    
    return res;
}

function numPrime(num){
    let count = 0;
    
    for(let i = 0; i < num; i++){
        if(isPrime(i)){
            count ++;
        }
    }
    
    return count;
}

function isPrime(n){
    if(n === 1) return false;
    if(n === 2) return true;
    
    for(let i = 2; i < n; i++){
        if(n % i === 0) return false;
    }
    
    return true;
}