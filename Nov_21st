Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

Notice that the solution set must not contain duplicate quadruplets.

Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]


var fourSum = function(nums, target) {
    let res = [];
    let set = new Set();
    nums.sort((a,b)=>a-b);
    if(nums===null||!nums.length) return res;
    
    for(let i = 0; i < nums.length - 3;i++){
        for(let j = i + 1; j < nums.length - 2; j++){
            let l = j + 1;
            let r = nums.length - 1;
            
            while( l < r ){
                let sum = nums[i] + nums[j] + nums[l] + nums[r];
                if(sum === target){
                    let subArr =  [nums[i], nums[j], nums[l], nums[r]];
                    let setArr = subArr.join('');
                    if(!set.has(setArr)){
                        set.add(setArr);
                        res.push(subArr);
                    }
                    while(l<r && nums[l] === nums[l+1]) l++;
                    while(l<r && nums[r] === nums[r-1]) r--;
                    l++;
                    r--;
                }else if(sum < target){
                    l++;
                }else if(sum > target){
                    r--;
                }
            }
        }
    }
    
    return res;
};


Given the head of a linked list, remove the nth node from the end of the list and return its head.
Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]

var removeNthFromEnd = function(head, n) {
    let clone = head;
    let root = head;
    let length = 0;
    while(clone){
        clone = clone.next;
        length ++;
    }
    
    let order = length - n;
    
    if (order === 0) return head.next;

    while (root && order > 1) {
        root = root.next;
        order--;
    }
    
    root.next = root.next.next;
    
    return head;
};

Follow up: Could you do this in one pass?

var removeNthFromEnd = function(head, n) {
//     let clone = head;
//     let root = head;
//     let length = 0;
//     while(clone){
//         clone = clone.next;
//         length ++;
//     }
    
//     let order = length - n;
    
//     if (order === 0) return head.next;

//     while (root && order > 1) {
//         root = root.next;
//         order--;
//     }
    
//     root.next = root.next.next;
    
//     return head;
    
    let dummy = new ListNode(0,head);
    let slow = dummy;
    let fast = dummy;
    
    for(let i = 1; i <= n + 1;i++){
        fast = fast.next;
    }
    
    while(fast!=null){
        slow = slow.next;
        fast = fast.next;
    }
    
    slow.next = slow.next.next;
    return dummy.next;
};