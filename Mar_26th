Given an input string s, reverse the order of the words.
A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.
Return a string of the words in reverse order concatenated by a single space.
Note that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.
 
Example 1:
Input: s = "the sky is blue"
Output: "blue is sky the"

Example 2:
Input: s = "  hello world  "
Output: "world hello"
Explanation: Your reversed string should not contain leading or trailing spaces.

Example 3:
Input: s = "a good   example"
Output: "example good a"
Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string.

Example 4:
Input: s = "  Bob    Loves  Alice   "
Output: "Alice Loves Bob"

Example 5:
Input: s = "Alice does not even like bob"
Output: "bob like even not does Alice"



function reverseWords(s) {
	let words = s.split(“ “);
	let res = [];
	
	for (let i=words.length-1; i>=0; i--) {
let word = words[i];
if (isWord(word)) res.push(word);
}
return res.join(“ “);
}

function isWord(str) {
return !!str.length;

	// for (const char of str) {
// if (char !== “ “) return true;
// }
// return false;
}

str.match(/^[\s+]/g).reverse().join(“ “);



49. Group Anagrams

Given an array of strings strs, group the anagrams together. You can return the answer in any order.
An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.
 
Example 1:
Input: strs = ["eat","tea","tan","ate","nat","bat"]
Output: [["bat"],["nat","tan"],["ate","eat","tea"]]

Example 2:
Input: strs = [""]
Output: [[""]]

Example 3:
Input: strs = ["a"]
Output: [["a"]]

Constraints:
1 <= strs.length <= 104
0 <= strs[i].length <= 100
strs[i] consists of lower-case English letters.

1.iterate through the array and make a hash map {“asd”: []}
2.break the word and put it into an order 
3.check if map has the ordered word,
	yes , push into the array
	No, create key(“xxxx”) and value([]) pair
4.return the values of the hash map

Function groupAnagrams(arr){
	Let map = new Map();
	
	for(let i = 0; i < arr.length; i++){
		Let word = arr[i];
		Let order = word.split(“”).sort();
		if(map.has(order)){
			map[order].push(word);
}else{
	map.set(order, []);
}
}

return Object.values(map);
}
