Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

var permute = function(nums) {
  if (nums.length === 0) return [[]];
  
  const result = [];
  const dfs = (arr, r=[]) => {
    if (arr.length === 0) result.push(r);
    else {
      for (let i = 0; i < arr.length; i++) {
        dfs(arr.slice(0, i).concat(arr.slice(i + 1)), r.concat([arr[i]]));
      }
    }
  }
  
  dfs(nums);
  
  return result;
};

Given a 32-bit signed integer, reverse digits of an integer.

Note:
Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.

Input: x = 123
Output: 321

var reverse = function(x) {
    if((x < (-1 * (2**31)))||(x > (2**31 -1))) return 0;
    
    let res = (x < 0 ? -1 : 1) * Number(String(Math.abs(x)).split("").reverse().join(""));
    if((res < (-1 * (2**31)))||(res > (2**31 -1))) return 0;
    
    return res;
};

Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.

Follow up: Could you solve it without converting the integer to a string?

Input: x = 121
Output: true

var isPalindrome = function(x) {
//     if (x < 0 || (x !== 0 && x%10 === 0)) return false;
//     let num = x;
//     let rev = 0;
    
//     while(num) {
//       rev = (rev * 10) + (num%10);
//       num = Math.floor(num/10);
//     }
//     return x === rev;
    
};