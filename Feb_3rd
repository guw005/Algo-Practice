leetcode 844

/*
 * Complete the 'compareStrings' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts following parameters:
 *  1. STRING s1
 *  2. STRING s2
 */

function compareStrings(s1, s2) {
    // Write your code here
    let back1 = 0;
    let back2 = 0;
    let i = s1.length - 1;
    let j = s2.length - 1;
    
    while(i >= 0 || j >= 0){
        while(i >= 0 && (back1 > 0 || s1[i] === '#')){
            if(s1[i] === '#'){
                back1++;
            }else{
                back1--;
            }
            i--;
        }
        
        while(j >= 0 && (back2 > 0 || s2[j] === '#')){
            if(s2[j] === '#'){
                back2++;
            }else{
                back2--;
            }
            j--;
        }
        
        if(i >=0 && j >=0 && s1[i] === s2[j]){
            i--;
            j--;
        }else{
            break;
        }
    }
    
    return (i === -1 && j === -1) ? 1 : 0;
}

leetcode 56
/*
 * Complete the 'getMergedIntervals' function below.
 *
 * The function is expected to return a 2D_INTEGER_ARRAY.
 * The function accepts 2D_INTEGER_ARRAY intervals as parameter.
 */

function getMergedIntervals(intervals) {
    // Write your code here
    let res = [];
    intervals.sort((a, b) => a[0] - b[0]);
    
    for(let i = 0; i < intervals.length; i++){
        if(res.length > 0 && intervals[i][0] <= res[res.length - 1][1]){
            res[res.length - 1][1] = Math.max(intervals[i][1], res[res.length - 1][1]);
        }else{
            res.push(intervals[i]);
        }
    }
    
    return res;
}