 * Complete the 'maximumSum' function below.
 *
 * The function is expected to return a LONG_INTEGER.
 * The function accepts INTEGER_ARRAY arr as parameter.
 */

function maximumSum(arr) {
    // Write your code here
    let max = arr[0];
    let sum = arr[0];
    
    for(let i = 1; i < arr.length; i++){
        sum = Math.max(arr[i], sum+arr[i]);
        max = Math.max(max, sum);
    }
    
    return max;
}

 * Complete the 'countPairs' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts following parameters:
 *  1. INTEGER_ARRAY numbers
 *  2. INTEGER k
 */

function countPairs(nums, k) {
    // Write your code here
    
    nums.sort((a,b) => (a - b))
    let result = 0
    for(let i = 0; i < nums.length; i++){
        if(i > 0 && nums[i] === nums[i - 1])
            continue
        for(let j = i + 1; j < nums.length; j++){
            let diff = nums[j] - nums[i]
            if(diff === k){
                result += 1
                break
            }
            if(diff > k) break
        }
    }
    return result
}

/*
 * Complete the 'getMinimumDifference' function below.
 *
 * The function is expected to return an INTEGER_ARRAY.
 * The function accepts following parameters:
 *  1. STRING_ARRAY a
 *  2. STRING_ARRAY b
 */

function getMinimumDifference(a, b) {
    // Write your code here
    let res = [];
    for(let i = 0; i < a.length; i++){
        if(a[i].length != b[i].length ){
            res.push(-1);
        }else{
            let map = new Map;
            for(let j = 0; j < a[i].length; j++){
                map[a[i][j]] = map[a[i][j]] ? map[a[i][j]] + 1 : 1;
            }
            
            for(let k = 0; k < b[i].length; k++){
                map[b[i][k]] = map[b[i][k]] ? map[b[i][k]] - 1 : 0;
            }
            
            let sum = 0;
            Object.values(map).forEach(el => {
                sum += el;
            })
            
            res.push(sum);
        }
    }
    
    return res;
}

/*
 * Complete the 'findLowestPrice' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts following parameters:
 *  1. 2D_STRING_ARRAY products
 *  2. 2D_STRING_ARRAY discounts
 */

function findLowestPrice(products, discounts) {
    // Write your code here
    
    let map = new Map;
    for(let i = 0; i < discounts.length; i++){
        let discount = discounts[i];
        map[discount[0]] = [discount[1], discount[2]];
    }
    
    // console.log(map);
    let sum = 0;
    
    for(let j = 0; j < products.length; j++) {
        let product = products[j];
        let prices = [];
        let price = product[0];
        for(let k = 1; k < product.length; k++){
            if(product[k] === 'EMPTY'){
                prices.push(price);
            }else{
                if(map[product[k]][0] === 0){
                    prices.push(map[product[k]][1]);
                }else if(map[product[k]][0] === 1){
                    prices.push(price-price*(map[product[k]][1]/100));
                }else if(map[product[k]][0] === 2){
                    prices.push(price-map[product[k]][1]);
                }
            }
        }
        console.log(prices);
        sum += Math.min(...prices);
    }
    return sum;
}