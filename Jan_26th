Evaluate the value of an arithmetic expression in Reverse Polish Notation.

Valid operators are +, -, *, /. Each operand may be an integer or another expression.


Note:

Division between two integers should truncate toward zero.

The given RPN expression is always valid. 
That means the expression would always evaluate to a result 
and there won't be any divide by zero operation.

Example 1:
Input: ["2", "1", "+", "3", "*"]
Output: 9
Explanation: ((2 + 1) * 3) = 9

Example 2:
Input: ["4", "13", "5", "/", "+"]
Output: 6
Explanation: (4 + (13 / 5)) = 6



Example 3:
Input: ["10", "6", "9", "3", "+", "-11", "*", "/", "*", "17", "+", "5", "+"]
Output: 22
Explanation: 
  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22

const RPN = (tokens) => {
    const numStack = [];
    tokens.forEach(token => {
        switch (token) {
            case '+':
                numStack.push(numStack.pop() + numStack.pop());
                break;
            case '-':
                numStack.push(-numStack.pop() + numStack.pop());
                break;
            case '*':
                numStack.push(numStack.pop() * numStack.pop());
                break;
            case '/':
                numStack.push( Math.trunc(1 / numStack.pop() * numStack.pop()));
                break;
            default:
                numStack.push(Number(token));
                break;
        };
    });
    return numStack[0];
};



given 2D array, return the max length of increasing path.

Input: nums = 
[
  [9,9,4],
  [6,6,8],
  [2,1,1]
] 
        
  [1,1,2],
  [2,2,1],
  [3,4,2]

n * n
*
n^2

1 -> 2 -> 6 -> 9
Output: 4 

public int maxLengthOfIncreasingPath(int[][] arr){
    if(arr == null || arr.length == 0) return 0;
    int[][] table = new int[arr.length][arr[0].length]; // 0
    int max = 0;

    for(int i = 0; i < arr.length; i++){
        for(int j = 0; j < arr[i].length; j++){
            int length = explore(arr, table, i, j, null);
            if(length > max){
                max = length;
            }
        }
    }

    return max;
}


1 3 8 9

// fill out table and return max length of the path start from [row, col]

private int explore(int[][] arr, int[][] table, int row, int col, Integer parent){
    if(row < 0 || col < 0 || row >= arr.length || col >= arr[row].length){
        return 0;
    }
    if(parent != null){
        if(arr[row][col] <= parent) return 0;
    }
    
    if(table[row][col]){
        return table[row][col];
    }
    
    // current is greater, we can continue
    int currentLength = Math.max(explore(arr, table, row - 1, col, arr[row][col]),
    explore(arr, table, row + 1, col, arr[row][col]),
    explore(arr, table, row, col - 1, arr[row][col]),
    explore(arr, table, row, col + 1, arr[row][col])) + 1;

    table[row][col] = currentLength;
    return currentLength;
}
given binary tree
return longest path between any two nodes in a tree
            
          1  
         / \
        2   3
       /  \     
      4    5
    /     /  \
 null   null  6
      
path:
4 2 1 3
5 2 1 3

return 4

function(){

let max = 0
const longestPath = function(node){
    if(node === null) return 0;

    const left = longestPath(node.left);
    const right = longestPath(node.right);

    if(left + right + 1 > max) max = left + right + 1;
    return Math.max(left, right) + 1
    
}


return max;
}



given n pairs of parentheses, generate all combinations of well-formed parentheses.

n = 3

[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]

n = 2;

// if no open, cant have close
// if have open, we can have close or open if there are available opens

["()()"]

var problem = function(n){
let ans = [];

const func = function(num, open, arr){
    if(num === 0 && open === 0){
        ans.push(Array.from(arr));
    }

    //choose open
    if(num > 0){
        arr.push('(');
        func(num -1 , open + 1, arr);
        arr.pop();
    }

    //choose close
    if(open > 0){
        arr.push(')');
        func(num, open - 1, arr);
        arr.pop();
    }
}

func(n, 0, []);
return ans;
}