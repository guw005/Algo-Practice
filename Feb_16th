Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.
Input: root = [1,2,3,null,5,null,4]
Output: [1,3,4]

Input: root = [1,null,3]
Output: [1,3]

 * function TreeNode(val, left, right) {
 * 	this.val = (val===undefined ? 0 : val)
 * 	this.left = (left===undefined ? null : left)
 * 	this.right = (right===undefined ? null : right)
 * }

Use BFS
Create a variable keeping track of the length of queue, everytime shift a element from the queue, the length will be subtracted by one, and when length is equal to 0, push the shifted element and reset the length to the length of queue

Queue with the root
Create a result array
While loop, stop the iteration until the queue has no element
Create a variable recording the length of the queue
Shift an element from the queue, and push the left and right into the queue, length--
Check if the length is equal to 0, reset the length to the length of the queue and push the shifted element to the result array
Return the result array




Function rightTree(root){
	if(root === null) return [];
	
	Let res = [];
	
	Let queue = [root];

Let length = queue.length;
	
	while(queue.length > 0){
				
		Let ele = queue.shift();
		Length--;
		Let left = ele.left;
		Let right = ele.right;

		if(left !== null){
			queue.push(left);
}
if(right !== null){
	queue.push(right);
}
		
		if(length === 0){
			res.push(ele.val);
			length = queue.length;
}
}

return res;
}

Time: O(n)
Space: O(n)
