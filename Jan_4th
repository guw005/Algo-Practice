Given a string s, find the length of the longest substring without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
Example 4:

Input: s = ""
Output: 0

var lengthOfLongestSubstring = function(s) {
    let l = 0;
    let r = 0;
    let set = new Set();
    let maxLength = 0;
    
    while(r < s.length){
        if(set.has(s[r])){
            while(s[l] !== s[r]){
                set.delete(s[l]);
                // console.log(set);
                l++
            }
            l++;
        }else{
            set.add(s[r]);
            // console.log(set);
            if(set.size > maxLength) maxLength = set.size;
        }
        r++;
    }
    
    return maxLength;
    
//     if( s.length === 0) return 0;

//     let left = 0;
//     let right = 0;
//     let set = new Set();
//     let maxLength = 0;

//     while(right < s.length){
//         if(set.has(s[right])){
//             while(s[left]!==s[right]){
//                 set.delete(s[left]);
//                 left++;
//             }
//             left++
//         } else {
//             set.add(s[right]);
//             if(set.size > maxLength){
//                 maxLength = set.size;
//             }
//         }
//         right++;
//     }

//     return maxLength;
};