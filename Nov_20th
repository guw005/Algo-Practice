Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Notice that the solution set must not contain duplicate triplets.

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]

var threeSum = function(nums) {
        
let arr = [];

const len = nums.length;

if(nums === null || len < 3) return arr;

nums.sort((a, b) => a - b);

for (let i = 0; i < len ; i++) {
if(nums[i] > 0) break;

 if(i > 0 && nums[i] === nums[i-1]) continue;
 
 let L = i+1;
 let R = len-1;
 while(L < R){
     const sum = nums[i] + nums[L] + nums[R];
     if(sum === 0){
         arr.push([nums[i],nums[L],nums[R]]);
         while (L<R && nums[L] === nums[L+1]) L++;
         while (L<R && nums[R] === nums[R-1]) R--;
         L++;
         R--;
     }
     else if (sum < 0) L++;
     else if (sum > 0) R--;
 }
}
return arr;
};


Given an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution.

Input: nums = [-1,2,1,-4], target = 1
Output: 2
Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).

var threeSumClosest = function(nums, target) {
    nums.sort((a,b) => a-b);
    let sum = Infinity;
    for(let i = 0 ; i < nums.length - 2; i++){
        let l = i + 1;
        let r = nums.length - 1;
        while( l < r){
            let currentSum = nums[i] + nums[l] + nums[r];
            if(Math.abs(currentSum - target) < Math.abs(sum - target)) sum = currentSum;
            if(currentSum - target < 0){
                l++;
            }else if(currentSum - target > 0){ 
                r--;
            }else{
                return sum
            }
        }
    }
    return sum;
};


Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]

var letterCombinations = function(digits, current = "", res = []) {
    let numbers = {
        2: "abc",
        3: "def",
        4: "ghi",
        5: "jkl",
        6: "mno",
        7: "pqrs",
        8: "tuv",
        9: "wxyz"
    }
    
    if (digits.length === 0 && current === "") {
        return res;
    }
  
    if (digits.length < 1) {
        return(res.push(current));
    }
  
    let currentNumber = numbers[digits[0]];
      
    for (let i = 0; i < currentNumber.length; i++) {
      let currentLetter = currentNumber[i];
      letterCombinations(digits.slice(1), current.concat(currentLetter), res);
    }
    
    return res;
};