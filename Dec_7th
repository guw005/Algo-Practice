Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.

 

Example 1:

Input: nums = [1,1,2]
Output:
[[1,1,2],
 [1,2,1],
 [2,1,1]]
Example 2:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

var permuteUnique = function(nums) {
    let result = [], usedElements = Array(nums.length).fill(false);
    
    // sort the array
    nums.sort((b, a) => b - a);
    
    const helper = (current, used) => {
        if(current.length === nums.length) result.push(current.slice());
        else {
            for(let i = 0; i < nums.length; i++){
                // if current number is previously traversed or is a duplicate number then continue
                if((used[i]) || (i > 0 && nums[i] === nums[i - 1] && !used[i - 1])) continue;
                
                used[i] = true;
                current.push(nums[i]);
                helper(current, used);
                used[i] = false;
                current.pop();
            }
        }
    }
    
    helper([], usedElements);
    
    return result;
};