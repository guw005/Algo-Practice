Evaluate the value of an arithmetic expression in Reverse Polish Notation.
Valid operators are +, -, *, /. Each operand may be an integer or another expression.
Note:
Division between two integers should truncate toward zero. -0.9 => 0
The given RPN expression is always valid. That means the expression would always evaluate to a result and there won't be any divide by zero operation.
Example 1:
Input: ["2", "1", "+", "3", "*"]
Output: 9
Explanation: ((2 + 1) * 3) = 9

Example 2:
Input: ["4", "13", "5", "/", "+"]
Output: 6
Explanation: (4 + (13 / 5)) = 6

[4, 13, 5]
num1 = 5
num2 = 13
Example 3:
Input: ["10", "6", "9", "3", "+", "-11", "*", "/", "*", "17", "+", "5", "+"]
Output: 22
Explanation: 
  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22
iterate through given array
if: push numbers onto a stack
if: when hitting an operation
	pop the top 2 numbers on the stack
	and evaluate them with the operation
	then push the result onto the stack
at the the stack should containing only the final result so just return that number
time: O(n)
space: O(n)
array => int 
function evaluate(expression) {
	const stack = [];

	for (let i = 0; i < expression.length; i++) {
		const element = expression[i];

		if (isNaN(parseInt(element))) {
			const right = stack.pop();
			const left = stack.pop();
			let result;

			if (element === ‘+’) {
				result = left + right;
} else if (element === ‘-’) {
				result = left - right;
} else if (element === ‘*’) {
	result = left * right;
} else if (element === ‘/’) {
	result = Math.trunc(left / right);
}

stack.push(result);

} else {
			stack.push(parseInt(element));
}
}

return stack[0];
}

Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.
Input: root = [1,2,3,null,5,null,4]
Output: [1,3,4]

Input: root = [1,null,3]
Output: [1,3]

 * function TreeNode(val, left, right) {
 * 	this.val = (val===undefined ? 0 : val)
 * 	this.left = (left===undefined ? null : left)
 * 	this.right = (right===undefined ? null : right)
 * }

Use BFS
Create a variable keeping track of the length of queue, everytime shift a element from the queue, the length will be subtracted by one, and when length is equal to 0, push the shifted element and reset the length to the length of queue

Queue with the root
Create a result array
While loop, stop the iteration until the queue has no element
Create a variable recording the length of the queue
Shift an element from the queue, and push the left and right into the queue, length--
Check if the length is equal to 0, reset the length to the length of the queue and push the shifted element to the result array
Return the result array




Function rightTree(root){
	if(root === null) return [];
	
	Let res = [];
	
	Let queue = [root];

Let length = queue.length;
	
	while(queue.length > 0){
				
		Let ele = queue.shift();
		Length--;
		Let left = ele.left;
		Let right = ele.right;

		if(left !== null){
			queue.push(left);
}
if(right !== null){
	queue.push(right);
}
		
		if(length === 0){
			res.push(ele.val);
			length = queue.length;
}
}

return res;
}

Time: O(n)
Space: O(n)
