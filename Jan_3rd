Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences.

Note:

The same word in the dictionary may be reused multiple times in the segmentation.
You may assume the dictionary does not contain duplicate words.
Example 1:

Input:
s = "catsanddog"
wordDict = ["cat", "cats", "and", "sand", "dog"]
Output:
[
  "cats and dog",
  "cat sand dog"
]
Example 2:

Input:
s = "pineapplepenapple"
wordDict = ["apple", "pen", "applepen", "pine", "pineapple"]
Output:
[
  "pine apple pen apple",
  "pineapple pen apple",
  "pine applepen apple"
]
Explanation: Note that you are allowed to reuse a dictionary word.
Example 3:

Input:
s = "catsandog"
wordDict = ["cats", "dog", "sand", "and", "cat"]
Output:
[]

var wordBreak = function(s, wordDict) {
    if(isSegmented(s, wordDict)){
        return dfs(s, wordDict, {});
    }else{
        return [];
    }
};

function isSegmented(s, wordDict){
    let set = new Set(wordDict);
    
    let dp = new Array(s.length + 1).fill(false);
    dp[0] = true;
    
    for(let i = 1; i <= s.length; i++){
        for(let j = 0; j < i; j++){
            if(dp[j] && set.has(s.substring(j, i))){
                dp[i] = true;
                break
            }
        }
    }
    
    return dp[s.length];
}

function dfs(s, wordDict, map){
    if(s in map) return map[s];
    let res = [];
    if(wordDict.includes(s)) res.push(s);
    for(let i = 1; i < s.length; i++){
        let left = s.substring(0, i);
        let right = s.substring(i);
        
        if(wordDict.includes(left) && dictContain(wordDict, right)){
            for(let segment of dfs(right, wordDict, map)){
                res.push(`${left} ${segment}`);
            }
        }
    }
    
    map[s] = res;
    return res;
}

function dictContain(wordDict, s){
    for(let i = 0; i < s.length; i++){
        if(wordDict.includes(s.substring(i))) return true;
    }
    
    return false;
}