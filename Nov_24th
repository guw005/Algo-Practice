Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.

If such an arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order).

The replacement must be in place and use only constant extra memory.

Input: nums = [1,2,3]
Output: [1,3,2]

var nextPermutation = function(nums) {
    if(nums === null || nums.length === 0) return nums;
    
    for(let i = nums.length - 1; i >= 0; i--){
        if(nums[i] < nums[i + 1]){
            let large = nextLarge(i);
            swap(i, large);
            reverse(i + 1);
            return nums;
        }
    }
    return nums.reverse();
    
    function nextLarge(idx){
        for(let j = nums.length; j > idx; j--){
            if(nums[j] > nums[idx]) return j;
        }
    }
    
    function swap(idx1, idx2){
        [nums[idx1] , nums[idx2]] = [nums[idx2], nums[idx1]];
    }
    
    function reverse(idx){
        let start = idx;
        let end = nums.length - 1;
        while(start < end){
            swap(start, end);
            start++;
            end--;
        }
    }
};

You are given an integer array nums sorted in ascending order, and an integer target.

Suppose that nums is rotated at some pivot unknown to you beforehand (i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

If target is found in the array return its index, otherwise, return -1.

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4

var search = function(nums, target) {
    if(nums === null || nums.length === 0)  return -1;
    
    let left = 0;
    let right = nums.length - 1;
    
    while(left <= right){
        let mid = left + Math.floor((right - left)/2);
        
        if(nums[mid] === target) return mid;
        
        if(nums[left] <= nums[mid]){
            if(nums[left] <= target &&  target < nums[mid]){
                right--;
            }else{
                left++;
            }
        }else{
            if(nums[mid] < target && target <= nums[right]){
                left++;
            }else{
                right--
            }
        }
    }
    
    return -1;
};

Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

var searchRange = function(nums, target) {    
    let start = -1;
    let end = -1;
    let count = 0;
    
    for(let i = 0; i < nums.length; i++){
        if(nums[i] === target){
            if(count === 0){
                start = i;
                end = i;
                count++;
            } else {
                end = i;
            }
        }
    }
    
    return [start, end];
};